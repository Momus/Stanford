# -*- mode: Org; eval: (auto-fill-mode 1) -*- #
Execute the line below each time or figure out [[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][how it works]]
(setq org-format-latex-options (plist-put org-format-latex-options
                                          :scale 1.75))


* Introduction and Relational Databases

*** Introduction

***** Definition
      A database system (DBS) provides storage of and access to data
      that is:
      - massive :: "terabytes of data a day" amount of data is growing
                   faster than amount of memory.
      - persistent :: outlives the process that executes on that data,
                      as opposed to data that is created and destroyed
                      during a single program's execution.
      - safe :: guarantees that data will stay in a _consistent state_.
      - multi-user :: multiple users or processes can access the data,
                      and it maintains its consistent state.  This is
                      handled by _concurrency control_.
      - convenient :: happens at two levels:
        - physical data independence :: the way data is stored on the
             disk is independent of the operations on that data.
        - high level query languages :: are _declarative_, i.e., they
             describe the data that needs to be accessed, but don't need
             to describe the algorithm for accessing the data.
      - efficient :: "The three most important words things in a DBMS
                     are, performance, performance, and performance."
                     This is the domain of the database administrator.
      - reliable :: modern DBMS's have a 99.99999% up time guarantee.

***** Key Concepts Covered
      - data model :: general description of how data is
                      structured. Examples are:
        - Relational Data Model :: data is considered as a set of records
        - XML model :: data is a streaming XML document
        - Graph Model :: all data is in the form of nodes and edges.
      - schema vs data :: analogous to types vs variables in a
                          program. The structure of a particular
                          database, created by a Database Designer.
      - data definition language :: used to describe and create the
           schema for database.
      - data manipulation language :: for operating on or modifying
           the data within a schema.


* [[https://lagunita.stanford.edu/courses/DB/RA/SelfPaced/course/][DB4]] Relational Algebra
  - queries :: operate on relations, produce relations as a result
  - examples :: simple college addmissions database: keys (attributes
                guaranteed to be _unique_ are _underlined_
    - college :: _cName_, state, enrollment
    - Student :: _sID_, sName, GPA, sizeHS
    - Apply :: _sID_, _cName_, _major_, decision
*** Select, Project, Join
    use operators to _filter_, _slice_, and _combine_ relatoins.
***** Simplest query: relation name.
      Run `Student` get a copy of the Stundent relation.
***** SELECT: pick certain rows
      - notation: $\sigma_{condition}$
      - examples:
        - Student with GPA < 3.7 :: $\sigma_{GPA\ >\ 3.7}\ Student$
        - AND HS <1000 :: $\sigma_{GPA>3.7 \land\ HS<1000}\ Student$
        - Applicants to CS major :: e$\sigma_{cName='Stanford' \land\ major='cs'}\ Apply$
***** PROJECT: pick certain columns
      - notation :: $\pi_{list\ of\ attributes}\ Relation\ Name$
      - examples:
        - ID and decision of all applicants :: $\pi_{sID,\ decision}\ Apply$
        - ID & name of students with GPA<3.7 :: $\pi_{sID,\
             sName}(\sigma_{GPA<3.7}\ Student)$
***** Duplicates
******* List of majors and decisons
        $\pi_{major,\ dec\ }\ Apply$ 
        - you would expect to have lots of duplicates
        - In SQL, that's OK, in RA, duplicates are always ommitted.
          - SQL is based on "multisets" or "bags"
***** Cross (Cartesian) Profuct: combine two relatins
      takes two relations and joinst them so the scema of the reult is
      the union of the schema of the two relations and contents are
      every combination of tuples of that relation.
      - Student X Apply :: when there are two columns with the same
           name th reusltant relation has columns for both preficed by
           the original table name:  Student.sID Apply.sID
      - result has eight attributes, which has  S * A tupples.
*******  Cross Product with other operators.
        - example :: Names and GPSs of students with HS>1000 who
                     applied to CS and were rejected:
$\pi_{sName, GPA}(\sigma_{Student.sID\ = Apply.sID \hspace{2 pt} \land
        \hspace{2 pt} HS>1000 \hspace{2 pt} \land \hspace{2 pt} major\
        =\ 'CS' \hspace{2 pt} \land \hspace{2 pt} dec\ =\ 'R'}
        (Student\ \times\ Apply))$
          - 
***** Natural Join
      - enforce equality on all attributes with the same name
      - eliminate one copy of duplicate attributes
******* Notation: $\bowtie$
******* Examples
        - Name & GPA :: of students with HS >1000 who applied to CS and
          were rejected:
          $\pi_{sName, gpa}}(\sigma_{hs>1000\ \land\ major=`CS' \land\ dec=`R'} (Student\ \bowtie\ Apply$))
        - Names & GPA :: students with HS>1000 who applied to CS at
                         college with enr>20,000 and were rejected:
        $\pi_{sName,GPA}(\sigma_{HS>1k \land major=``CS" \land dec=``R"}(Studnet \bowtie (Apply \bowtie College)))$
******* Summary:
        Natural Join can be rewritten using plain join:
$E_{1} \bowtie E_{2} \equiv \pi_{schema(E_{1})\bigcup
schema(E_{2})}(\sigma_{E_{1}\cdot A_{1}=E_{2}\cdot A_{1}\land
E_{1}\cdot A_{2}=E_{2}\cdot A_{2} ...} (E_{1}\times E_{2}))$

***** Theta Join  $\bowtie_{\theta}$
      $Exp_{1} \bowtie_{\theta} Exp_{2}\ \equiv\ \sigma_{\theta}(Exp_{1}
      \times Exp_{2})$
******* Most DBMS use theta join when combining relations.
